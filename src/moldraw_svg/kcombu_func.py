##
## <kcombu_func.py>
##
##  Functions for dealing with output files generated by the "kcombu" program.
##  
##  These functinos are used for 'moldraw.cgi' and the WEB servers of kcombu and LigandBox
##
## LastModified: Jan 5, 2013
##

import os
import sys



def read_atom_match_file(ifname,matchlist,dat):

#
# #COMP_TIME  10.014819 seconds
# #AlgoType X
# #ConnectGraphType D
# #CalcFinished B
# #MoleculeA ADP.sdf
# #MoleculeB ATP.sdf
# #FiletypeA S
# #FiletypeB S
# #NatomA 27
# #NatomB 31
# #NheavyatomA 27
# #NheavyatomB 31
# #TotalNatompair 175
# #NpermuA 0
# #NpermuB 0
# #Len_of_MATCHlist 12
# #RankMatchOutput 1
# #Etotal     9.328547
# #Eatommatch 6.609859
# #Eselfcrash 2.718687
# #Ercptcrash 0.000000
# #rmsd_match 0.713057
# #[numA] [num_in_fileA] [atomnameA] --- [numB] [num_in_fileB] [numpair] [atomnameB] [atomtype] [ECA] [ECB] [Nnei_diff]
# >1
# #Npair_atom  8
# #tanimoto    0.275862
# #select_dis  26.000000
# #Ncomponent  1
# 11    11       S --- 12    12       S  1 S    23 21  2  2
# 12    12       O --- 14    14       O  2 O1    7  6  1  0
# 13    13       O --- 13    13       O  3 O1    7  6  1  0
# 14    14       C --- 2     2        C  4 C@   14 19  5  1
# 16    16       C --- 3     3        C  5 C@   16 17  1  2
# 17    17       C --- 5     5        C  6 C@   15 17  2  2
# 18    18       C --- 7     7        C  7 C@   16 17  1  4
# 19    19       C --- 11    11       C  8 C@   19 19  0  2
# //

# >1
# #Npair_atom  31
# #tanimoto    1.000000
# #select_dis  0.000000
# #Ncomponent  1
# #Maxdiff_topodis  0
# #[numfileAB][numAB]   [atomnameAB][atomtype] [EC_AB] [ECdiff] [Nnei_diff]
# 2939  1     1     1      PG   P1  P    20 20  0  0
# 2940  2     2     2      O1G  O1  O1    5  5  0  0
# 2941  3     3     3      O2G  O2  O1    5  5  0  0
# 2942  4     4     4      O3G  O3  O1    5  5  0  0
# 2943  5     5     5      PB   P2  P    24 24  0  0
# 2944  6     6     6      O1B  O4  O1    6  6  0  0



  if not os.access(ifname,os.R_OK):
    print "#WARNING:Can't open filename '%s'" %(ifname)
    return(0)

  f = open(ifname)
 
  status = 'header'

  for line in f:
    line = line.rstrip('\n')
    X = line.split()
    if (line.startswith('/')):
      matchlist.append(match)
      pass
    elif (line.startswith('>')):
      match = {}
      match['A'] = []
      match['B'] = []
      match['num_in_fileA'] = []
      match['num_in_fileB'] = []
      match['Ncomponent'] = 0
      status = 'match'
    elif (line.startswith('#')==0) and (len(line)>10):
      #match['A'].append(int(X[0]))    ## matched atom num list [1..NatomA]
      #match['B'].append(int(X[4]))    ## matched atom num list [1..NatomB]
      #match['num_in_fileA'].append(X[1])
      #match['num_in_fileB'].append(X[5])
      match['num_in_fileA'].append(X[0])
      match['num_in_fileB'].append(X[1])
      match['A'].append(int(X[2]))    ## matched atom num list [1..NatomA]
      match['B'].append(int(X[3]))    ## matched atom num list [1..NatomB]
    elif (line.startswith('#') and (status=='header')):
      field = line[1:].split()
      if (len(field)==2):
        item = field[0]
        val  = field[1]
        dat[item] = val
    elif (line.startswith('#') and (status=='match')):
      field = line[1:].split()
      if (len(field)==2):
        item = field[0]
        val  = field[1]
        match[item] = val

  f.close()
  return(1)





class LibraryMolecule:
  def __init__(self):
    self.mol  = ''  ## class Molecule (malloc later)
    self.rank      = 0     
    self.molname   = ''     
    self.tanimoto  = 0.0 
    self.tanimoto_filter  = 0.0 
    self.Npair     = 0 
    self.Natom     = 0 
    self.selct_dis = 0.0 
    self.molform   =  ''
    self.class_str = ''
    self.num_in_fileQ   = []  ## atom_num_in_file for the molecule Q
    self.num_in_fileL   = []  ## atom_num_in_file for the molecule L
    self.numQ           = []  ## atom_num for the molecule Q
    self.numL           = []  ## atom_num for the molecule L
    pass
  def __str__(self):
    return "#LibraryMolecule(rank %d molname '%s')"%(self.Natom,self.molname)
    pass



class AtomMatch:
  def __init__(self):
    self.rank           = 0
    self.numA           = []
    self.numB           = []
    self.num_in_fileA   = []
    self.num_in_fileB   = []





def read_kcombu_search_result(ifname,mollist,dat):
# # #>> FILE_FORMAT_EXAMPLE <<
# #COMMAND /var/www/html/ligandbox/cgi-bin/dkcombu -M S -Q /var/www/html/ligandboxout/TMPOUT/9983.Qmol -fQ S -fL S -ide /var/www/html/ligandboxout/DATA/kegg_drug.des -alg B -con C -at K -bo R -tao 0.6 -tap 0.6 -tam 0.6 -mtd -1 -w D -osc /var/www/html/ligandboxout/TMPOUT/9983.sch
# #DATE_START Aug 8,2011 19:39:11
# #DATE_END   Aug 8,2011 19:39:11
# #COMP_TIME  0.071164 seconds
# #QUERY_FILENAME    /var/www/html/ligandboxout/TMPOUT/9983.Qmol
# #QUERY_NAME        c2ccc1CCCc1c2
# #QUERY_FILETYPE    S
# #QUERY_MOLFORMULA  C9
# #QUERY_NATOM       9
# #QUERY_NHEAVYATOM  9
# #ALGORITHM            B
# #CONNECT_GRAPH        C
# #MAX_DIF_TOPODIS      -1
# #THRE_TANIMOTO_FILTER 0.600000
# #THRE_TANIMOTO_OUT    0.100000
# #LIBRARY_FILE      
# #LIBRARY_DIRECTORY /DB/kegg/medicus/drug/mol
# #NMOL_IN_LIBRARY   7354
# #NMOL_OVER_THRE    4
# [SIMILAR_MOLECULE_LIST]
# #[rank(1)] [molname(2)] [similarity MCS(3)] [similarity ONEATOM(4)] [similarity ATOMPAIR(5)]
# #[Natompair(6)] [Nheavyatom(7)] [select_dis(8)] [molecular formula(9)]
# #                                                                          [element_for_query]:POOOPOOOPOOOOCCOCOCOCNCNCCNNCNC
# #                                                                             [ring_for_query]:              aaa a abbbbb bbbb
# #                                                                      [atom_number_for_query]:         1111111111222222222233
# #                                                                                             :1234567890123456789012345678901
# #[rk][name]                         [sMCS][sONE][sPAIR][Npair][Nhvyatm][seldis][molform]      :-------------------------------
# 1    D00005001_00010000/D08646.sdf  1.000 1.000 1.000  31  31    0.000 C10_N5_O13_P3           POOOPOOOPOOOOCCOCOCOCNCNCCNNCNC 
# 2    D00005001_00010000/D08647.sdf  0.939 0.939 0.913  31  33    0.000 C10_N5_O13_NA2_P3       POOOPOOOPOOOOCCOCOCOCNCNCCNNCNC 
# 3    D00000001_00005000/D02300.sdf  0.763 0.763 0.818  29  36   10.000 C10_N5_O16_NA2_P3       P--OPOOOPOOOOCCOCOCOCNCNCCNNCNC 
# 4    D00000001_00005000/D02769.sdf  0.688 0.742 0.832  22  23    9.000 C10_N5_O7_P             --------POO-OCCOCOCOCNCNCCNNCNC 
# 5    D00005001_00010000/D06299.sdf  0.688 0.742 0.832  22  23    9.000 C10_N5_O7_P             --------POO-OCCOCOCOCNCNCCNNCNC 
# 6    D00000001_00005000/D01907.sdf  0.667 0.719 0.804  22  24   19.000 C10_N5_O7_F_P           --------POO-OCCOCOCOCNCNCCNNCNC 
# 7    D00005001_00010000/D06300.sdf  0.647 0.697 0.772  22  25    9.000 C10_N5_O7_NA2_P         --------POO-OCCOCOCOCNCNCCNNCNC 
# [ATOM_MATCHING]
# 1    |1 2|2 1|3 3|4 6|5 8|6 7|7 9|8 4|9 5
# 2    |1 2|2 6|3 1|4 10|5 7|7 11|8 4|9 8
# 3    |1 2|2 6|3 1|4 10|5 7|7 11|8 4|9 8
# 4    |1 10|2 9|3 8|4 6|8 5|9 2

# #COMMAND lkcombu -M S -Q a.sdf -idml lib -nml N -osl osl -tam 0.5
# #DATE_START Nov 23,2011 17:7:3
# #DATE_END   Nov 23,2011 17:7:4
# #COMP_TIME  0.462330 seconds
# #QUERY_FILENAME    a.sdf
# #QUERY_NAME        NS-01548881
# #QUERY_FILETYPE    S
# #QUERY_MOLFORMULA  C24_N2_O2_CL
# #QUERY_NATOM       29
# #QUERY_NHEAVYATOM  29
# #ALGORITHM            B
# #CONNECT_GRAPH        C
# #MAX_DIF_TOPODIS      -1
# #THRE_TANIMOTO_MCS      0.500000
# #THRE_TANIMOTO_ATOMPAIR -1.000000
# #THRE_TANIMOTO_ONEATOM  0.000000
# #LIBRARY_DIRECTORY  .
# #LIBRARY_DESCRIPTOR 
# #NMOL_IN_LIBRARY   96
# #NMOL_OVER_THRE    6
# #N_LIBRARY_FILE 3
# #LIBRARY_FILE_0 lib/C.sdf
# #LIBRARY_FILE_1 lib/A.sdf
# #LIBRARY_FILE_2 lib/B.sdf
# [SIMILAR_MOLECULE_LIST]
# #[rank(1)] [molecular_num(2)] [file_num(3)] [file_offset(4)] [molecular_name(5)]
# #[similarity MCS(6)] [similarity ONEATOM(7)] [similarity ATOMPAIR(8)]
# #[Natompair(9)] [Nheavyatom(10)] [select_dis(11)] [molecular formula(12)]
# #                                                                   [element_for_query]:NCCNCCCOCCCCCCCCCCCCCOcCCCCCC
# #                                                                      [ring_for_query]:aaaaaab c ccbbcccbabb   a  aa
# #                                                               [atom_number_for_query]:         11111111112222222222
# #                                                                                      :12345678901234567890123456789
# #[rk][num][name]             [sMCS][sONE][sPAIR][Npair][Nhvyatm][seldis][molform]      :-----------------------------
# 1    31 1 0     NS-01548881  1.000 1.000 0.000  29  29    0.000 C24_N2_O2_CL            NCCNCCCOCCCCCCCCCCCCCOcCCCCCC
# 2    46 1 43283 NS-01548897  0.513 0.903 0.000  20  30    3.000 C23_N2_O2_CL3           NCCNCCCO-C--CC---CCCC-cCC--CC
# 3    44 1 37395 NS-01548895  0.513 0.903 0.000  20  30    3.000 C23_N2_O2_CL3           NCCNCCCO-C--CC---CCCC-cCC--CC
# 4    38 1 21557 NS-01548888  0.513 0.903 0.000  20  30    3.000 C23_N2_O2_CL3           NCCNCCCO-C--CC---CCCC-cCC--CC
# 5    53 1 65971 NS-01548905  0.500 0.935 0.000  20  31    3.000 C24_N2_O2_CL3           NCCNCCCO-C--CC---CCCC-cCC--CC
# 6    47 1 46849 NS-01548899  0.500 0.935 0.000  20  31    3.000 C24_N2_O2_CL3           NCCNCCCO-C--CC---CCCC-cCC--CC
# [ATOM_MATCHING]
# 1    |1 1|2 2|3 3|4 4|5 5|6 6|7 7|8 8|9 9|10 10|11 11|12 12|13 13|14 14|15 15|16 16|17 17|18 18|19 19|20 20|21 21|22 22|23 23|24 24|25 25|26 26|27 27|28 28|29 29
# 2    |1 1|2 2|3 3|4 4|5 5|6 6|7 8|8 9|10 12|13 13|14 14|18 16|19 18|20 19|21 20|23 21|24 23|25 24|28 29|29 30
# 3    |1 1|2 2|3 3|4 4|5 5|6 6|7 7|8 10|10 12|13 13|14 14|18 17|19 19|20 22|21 23|23 25|24 26|25 27|28 29|29 30
# 4    |1 1|2 2|3 3|4 4|5 5|6 6|7 7|8 10|10 12|13 13|14 14|18 18|19 19|20 21|21 22|23 24|24 26|25 27|28 29|29 30
# 5    |1 1|2 2|3 3|4 4|5 5|6 6|7 7|8 10|10 14|13 12|14 13|18 18|19 19|20 21|21 22|23 24|24 28|25 26|28 30|29 31
# 6    |1 1|2 2|3 3|4 4|5 5|6 6|7 8|8 9|10 14|13 12|14 13|18 16|19 18|20 19|21 20|23 21|24 28|25 23|28 30|29 31



  if os.access(ifname,os.R_OK):
    f = open(ifname)
  else:
    print "#WARNING(read_kcombu_search_result):Can't open '%s'"%(ifname)
    return(0)
  state = ''
  for line in f:
    line = line.rstrip('\n')
    field = line.split()
    #print "%s:%s"%(line,state)
    if (len(field)>1):
      if (line.startswith('#NMOL_IN_LIBRARY')):
        dat['NMOL_IN_LIBRARY'] = field[1]
      if (line.startswith('#QUERY_FILENAME')):
        dat['QUERY_FILENAME'] = field[1]
      if (line.startswith('#QUERY_NAME')):
        dat['QUERY_NAME'] = field[1]
      if (line.startswith('#QUERY_FILETYPE')):
        dat['QUERY_FILETYPE'] = field[1]
      if (line.startswith('#ALGORITHM')):
        dat['ALGORITHM'] = field[1]
      if (line.startswith('#CONNECT_GRAPH')):
        dat['CONNECT_GRAPH'] = field[1]
      if (line.startswith('#THRE_TANIMOTO_FILTER')):
        dat['THRE_TANIMOTO_FILTER'] = field[1]
      if (line.startswith('#THRE_TANIMOTO_OUT')):
        dat['THRE_TANIMOTO_OUT'] = field[1]
      if (line.startswith('#NMOL_CAL_MATCH')):
        dat['NMOL_CAL_MATCH'] = field[1]
      if (line.startswith('#LIBRARY_DESCRIPTOR')):
        dat['LIBRARY_DESCRIPTOR'] = field[1]
    if (line.startswith('[SIMILAR_MOLECULE_LIST]')==1):
      state = 'list'
    elif (line.startswith('[ATOM_MATCHING]')==1):
      state = 'match'
    elif (line.startswith('#')==0) and (len(line)>10):
      if (state=='list'):
# #[rk][name]                         [sMCS][sONE][sPAIR][Npair][Nhvyatm][seldis][molform]      :-------------------------------
# 1    D00005001_00010000/D08646.sdf  1.000 1.000 1.000  31  31    0.000 C10_N5_O13_P3           POOOPOOOPOOOOCCOCOCOCNCNCCNNCNC 
# 2    D00005001_00010000/D08647.sdf  0.939 0.939 0.913  31  33    0.000 C10_N5_O13_NA2_P3       POOOPOOOPOOOOCCOCOCOCNCNCCNNCNC 

# #[rk][num][name]             [sMCS][sONE][sPAIR][Npair][Nhvyatm][seldis][molform]      :-----------------------------
# 1    31 1 0     NS-01548881  1.000 1.000 0.000  29  29    0.000 C24_N2_O2_CL            NCCNCCCOCCCCCCCCCCCCCOcCCCCCC
# 2    46 1 43283 NS-01548897  0.513 0.903 0.000  20  30    3.000 C23_N2_O2_CL3           NCCNCCCO-C--CC---CCCC-cCC--CC

        field = line.split()
        dic = {}
        dic['rank']        = int(field[0])
        dic['mol_num']     = int(field[1])
        dic['file_num']    = int(field[2])
        dic['file_offset'] = int(field[3])
        dic['molname']     = field[4]
        dic['tanimoto_mcs']       = float(field[5])
        dic['tanimoto_oneatom']   = float(field[6])
        dic['tanimoto_atompair']  = float(field[7])
        dic['Npair']       = int(field[8])
        dic['Natm']        = int(field[9])
        dic['sel_dis']     = float(field[10])
        dic['molform']     = field[11]
        dic['property'] = ""
        mollist.append(dic)
      if (state=='match'):
        field = line.split('|')
        rank = int(field[0])
        mollist[rank-1]['anumA'] = []
        mollist[rank-1]['anumB'] = []
        for i in range(1,len(field)):
          [a,b] = field[i].split()
          mollist[rank-1]['anumA'].append(int(a))
          mollist[rank-1]['anumB'].append(int(b))


  return(1)




class LibraryMoleculeAVA:
  def __init__(self):
    self.mol  = ''  ## class Molecule (malloc later)
    self.num       = 0     
    self.molname   = ''     
    self.molform   =  ''
    self.class_str = ''
  def __str__(self):
    return "#LibraryMoleculeAVA(num %d molname '%s')"%(self.num,self.molname)
    pass

def read_list_all_vs_all_file(ifname,libmolava_list,scmat,avadat):
## datalist[0,1,2,...]        : list of data
## dataclass{dataname}        : property(class) of data 
## scmat[datanumA][datanumB]  : similarity matrix.

# #>>Similarities in List format<< 
# #COMMAND lkcombu -M A -ill ligand_sdf.list -idl /DB/LIGAND-EXPO/SDF2d -fL S -osl lig_NEU.ava -con T -mtd 1 
# #DATE_START Jul 2,2011 18:14:39 
# #DATE_END   Jul 2,2011 18:14:41 
# #COMP_TIME  1.633371 seconds 
# #LIBRARY_FILE       
# #LIBRARY_DIRECTORY /DB/LIGAND-EXPO/SDF2d 
# #NMOL_IN_LIBRARY 15 
# #NDATA 15 
# #DATA 0 SIA  NEU 
# #DATA 1 BCZ  NEU 
# #DATA 2 G28  NEU 
# #DATA 3 4AM  NEU 
# #DATA 4 DAN  NEU 
# #DATA 5 G39  NEU 
# #DATA 6 ABX  NEU 
# #DATA 7 G20  NEU 
# #DATA 8 DPC  NEU 
# #DATA 9 GNA  NEU 
# #DATA 10 ABW  NEU 
# #DATA 11 EQP  NEU 
# #DATA 12 9AM  NEU 
# #DATA 13 ZMR  NEU 
# #DATA 14 49A  NEU 
# 0 1 0.419355 
# 0 2 0.615385 
# 0 3 0.863636 
# 0 4 0.952381 
# :
# 11 14 0.708333 
# 12 13 0.720000 
# 12 14 0.904762 
# 13 14 0.720000 
  print "#read_list_all_vs_all_file('%s'):"%(ifname)
  if not os.access(ifname,os.R_OK):
    print "#ERROR:Can't open list_all_vs_all file '%s'"%(ifname)
    sys.exit(1)
  f = open(ifname)
  for line in f:
    line = line.rstrip('\n')
    field = line.split()
    if (len(field)==1):
      field.append("")
    if (line.startswith('#NDATA')):
      avadat['NDATA'] = int(field[1])
      if (len(scmat)==0):
        for i in range(avadat['NDATA']):
          scmat.append([-1.0 for j in range(avadat['NDATA'])]) 
    if (line.startswith('#LIBRARY_FILE')):
      avadat['LIBRARY_FILE'] = field[1]
    if (line.startswith('#LIBRARY_DIRECTORY')):
      avadat['LIBRARY_DIRECTORY'] = field[1]
    if (line.startswith('#NMOL_IN_LIBRARY')):
      avadat['NMOL_IN_LIBRARY'] = int(field[1])
      if (len(scmat)==0):
        for i in range(avadat['NMOL_IN_LIBRARY']):
          scmat.append([-1.0 for j in range(avadat['NMOL_IN_LIBRARY'])]) 
    if (line.startswith('#DATA')):
      libmol = LibraryMoleculeAVA()
      libmol.molname   = field[2]
      if (len(field)>3):
        libmol.class_str = field[3]
      libmol.num   = len(libmolava_list)
      libmolava_list.append(libmol)
    if (line.startswith('#')==0) and (len(line)>10) and (len(field)==3):
      i = int(field[0])
      j = int(field[1])
      #index = "%d:%d"%(i,j)
      #scmat[index] = float(field[2])
      scmat[i][j] = scmat[j][i] = float(field[2])
      #print "%s %f"%(index,scmat[index])
      #print datalist[i],datalist[j],scmat[datalist[i]][datalist[j]],scmat[datalist[j]][datalist[i]]
  f.close()





def make_atom_num_list_from_num_in_file(mol, num_list, num_in_file_list):
  for n in (num_in_file_list):  
    num_list.append(mol.num_from_num_in_file.get(n,0))
  
 

#############
### MAIN ####
#############


def _main():
  if (len(sys.argv)<2):
    print "kcombu_func.py A [atom_match_file]"
    print "kcombu_func.py S [libsch_result_file]"
    sys.exit(1)

  if (sys.argv[1]=='A'):
    matchlist = []
    amdat = {}
    read_atom_match_file(sys.argv[2],matchlist,amdat)
    for item in (amdat.keys()):
      print "#header_property '%s' :: '%s'"%(item,amdat[item])
    for x in (matchlist):
      print ">%d"%(len(x['A']))    
      for i in range(len(x['A'])):
        sys.stdout.write("%d %d|"%(x['A'][i],x['B'][i]))
      sys.stdout.write("\n")
      for item in (x.keys()):
        print "  #match_property '%s' :: '%s'"%(item,x[item])

  if (sys.argv[1]=='S'):
    liblist = []
    schdat = {}
    read_kcombu_search_result(sys.argv[2],liblist,schdat)
    for x in (liblist):
      print "%d %s %f %s"%(x['rank'], x['molname'],x['tanimoto_mcs'],x['molform'])
 

if __name__ == '__main__': _main()



